'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ws = require('../ws/ws');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*

On click

*/
function onDocClick() {

  // window.paceOptions = {
  //   ajax: {
  //    trackMethods: ["GET", "POST"]
  //  }
  // }
  Pace.restart();

  $('.doc-term').on('click', function () {

    console.log('clicked', $(this).text());
    var $doc = $(this);
    console.log('$doc: ', $doc);

    Pace.restart();
    Pace.track((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
      var data, url;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:

              console.log('inside stop');

              _context.next = 3;
              return (0, _ws.getDoc)($doc.data('doc-id'));

            case 3:
              data = _context.sent;


              data = JSON.parse(data);

              console.log("data.content: ", data);
              showDocContent(data.content);

              url = "/docs/" + data.slug;


              window.history.pushState("object or string", "Title", url);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
  });
}

/*

Show Doc Content

*/
function showDocContent(docContent) {

  $('.main').empty().append($('<div class="entry-content">' + docContent + '</div>'));

  Prism.highlightAll(true, function () {
    console.log('Doneeeeeeeeeee highlighting');
  });
}

/*

Init Docs

*/
function initDocs() {
  onDocClick();
}

console.log("Docs page");
initDocs();