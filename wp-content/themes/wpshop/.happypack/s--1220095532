'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onShopifyAuth = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

/*

Control center

*/
var onShopifyAuth = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee($) {
    var authData, authDataResponse;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return isValidHMAC($);

          case 3:
            _context.next = 10;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](0);


            (0, _utils.insertMessage)(_context.t0, 'error', true);
            (0, _utils.hideLoader)($('body'));

            return _context.abrupt('return', _context.t0);

          case 10:
            _context.prev = 10;
            _context.next = 13;
            return isValidHostname($);

          case 13:
            _context.next = 20;
            break;

          case 15:
            _context.prev = 15;
            _context.t1 = _context['catch'](10);


            (0, _utils.insertMessage)(_context.t1, 'error', true);
            (0, _utils.hideLoader)($('body'));

            return _context.abrupt('return', _context.t1);

          case 20:
            _context.prev = 20;
            _context.next = 23;
            return isValidNonce($);

          case 23:
            authData = _context.sent;
            _context.next = 31;
            break;

          case 26:
            _context.prev = 26;
            _context.t2 = _context['catch'](20);


            (0, _utils.insertMessage)(_context.t2, 'error', true);
            (0, _utils.hideLoader)($('body'));

            return _context.abrupt('return', _context.t2);

          case 31:
            _context.prev = 31;
            _context.next = 34;
            return updateAuthDataWithCode($, authData);

          case 34:
            authDataResponse = _context.sent;
            _context.next = 42;
            break;

          case 37:
            _context.prev = 37;
            _context.t3 = _context['catch'](31);


            (0, _utils.insertMessage)(_context.t3, 'error', true);
            (0, _utils.hideLoader)($('body'));

            return _context.abrupt('return', _context.t3);

          case 42:
            _context.prev = 42;
            _context.next = 45;
            return (0, _ws.saveAuthData)((0, _stringify2.default)(authDataResponse.updatedAuthenticatedSites));

          case 45:
            _context.next = 52;
            break;

          case 47:
            _context.prev = 47;
            _context.t4 = _context['catch'](42);


            (0, _utils.insertMessage)(_context.t4, 'error', true);
            (0, _utils.hideLoader)($('body'));

            return _context.abrupt('return', _context.t4);

          case 52:

            /*
             At this point we've updated the authenticated consumer with the code
            value sent from Shopify. We can now query for this value from the
            consumer side.
             */
            window.location = authDataResponse.finalRedirectURL;

          case 53:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 5], [10, 15], [20, 26], [31, 37], [42, 47]]);
  }));

  return function onShopifyAuth(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _find = require('ramda/src/find');

var _find2 = _interopRequireDefault(_find);

var _propEq = require('ramda/src/propEq');

var _propEq2 = _interopRequireDefault(_propEq);

var _unionWith = require('ramda/src/unionWith');

var _unionWith2 = _interopRequireDefault(_unionWith);

var _eqProps = require('ramda/src/eqProps');

var _eqProps2 = _interopRequireDefault(_eqProps);

var _utils = require('../utils/utils');

var _ws = require('../ws/ws');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*

Checks if HMAC is valid

*/
function isValidHMAC($) {

  return new _promise2.default(function (resolve, reject) {

    var result = (0, _utils.getUrlParams)(location.search);
    var origHMAC = result.hmac;

    var dataToVerify = {
      code: result.code,
      shop: result.shop,
      state: result.state,
      timestamp: result.timestamp
    };

    var message = $.param(dataToVerify);
    var secret = 'd73e5e7fa67a54ac25a9af8ff8df3814';
    var finalDigest = crypto.createHmac('sha256', secret).update(message).digest('hex');

    if (finalDigest === origHMAC) {
      resolve("Valid HMAC");
    } else {
      // reject('Error: Invalid HMAC. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
      resolve();
    }
  });
};

/*

Check if hostname is valid

*/
function isValidHostname($) {

  return new _promise2.default(function (resolve, reject) {

    var result = (0, _utils.getUrlParams)(location.search);
    var shopifyDomainSuffix = '.myshopify.com';

    if (validator.isURL(result.shop) && result.shop.endsWith(shopifyDomainSuffix)) {
      resolve("Valid hostname");
    } else {
      reject('Error: Invalid Hostname. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
    }
  });
};

/*

Check if current nonce within the URL is valid. Checks
against the stored nonce values in the database.

*/
function isValidNonce($) {

  return new _promise2.default(function (resolve, reject) {

    var url = (0, _utils.getUrlParams)(location.search);

    if (!url.hasOwnProperty('state')) {
      reject('Error: Nonce not available. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
    } else {

      var nonce = url.state;

      (0, _ws.getStoredAuthData)().then(function (response) {

        response = JSON.parse(response);

        var nonceMatches = (0, _find2.default)((0, _propEq2.default)('nonce', nonce))(response);

        if (nonceMatches) {
          resolve(response);
        } else {
          reject('Error: Nonce invalid or not found. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
        }
      });
    }
  });
};

/*

Update the stored consumer entry with 'code'

*/
function updateAuthDataWithCode($, authData) {

  return new _promise2.default(function (resolve, reject) {

    var url = (0, _utils.getUrlParams)(location.search);

    if (!url.hasOwnProperty('state')) {
      reject('Error: Nonce not available. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
    } else {

      var nonce = url.state;

      // Turn the JSON into JS object
      // var authData = JSON.parse(authData);

      // Finds the client which matches the nonce in the URL
      var nonceMatch = (0, _find2.default)((0, _propEq2.default)('nonce', nonce))(authData);

      if (nonceMatch.nonce === url.state) {

        // Verified
        nonceMatch.code = url.code;

        var finalRedirectURL = nonceMatch.url + "&shop=" + encodeURIComponent(url.shop) + "&auth=true";

        // Conver to array so we can operate
        nonceMatch = [nonceMatch];

        // Merging updated client with everything else
        var updatedAuthenticatedSites = (0, _unionWith2.default)((0, _eqProps2.default)('domain'), nonceMatch, authData);

        // Saving client records to database
        resolve({
          finalRedirectURL: finalRedirectURL,
          updatedAuthenticatedSites: updatedAuthenticatedSites
        });
      } else {
        reject('Error: Nonce does not match. Please try reconnecting your WordPress site to Shopify. If you\'re still experiencing the issue send an email to <a href="mailto:hello@wpshop.io">hello@wpshop.io</a> for immediate support.');
      }
    }
  });
};exports.onShopifyAuth = onShopifyAuth;