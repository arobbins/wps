'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.initForms = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _validation = require('../forms/validation');

var _utils = require('../utils/utils');

var _ws = require('../ws/ws');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*

Animate Labels

*/
function animateLabel($) {

  $('#mailinglist-form .form-input').on('focusin', function () {
    $(this).closest('.form-control').addClass('is-focused');
  });

  $('#mailinglist-form .form-input').on('focusout', function () {

    if (!$(this).val()) {
      $(this).closest('.form-control').removeClass('is-focused');
    }
  });
}

/*

addPlaceholders

*/
function addPlaceholders($) {

  var $inputUsername = $("#edd_user_login");
  var $inputPassword = $("#edd_user_pass");

  if ($inputUsername.length) {
    $inputUsername.attr('placeholder', $inputUsername.prev().text().trim());
  }

  if ($inputPassword.length) {
    $inputPassword.attr('placeholder', $inputPassword.prev().text().trim());
  }
}

/*

addPlaceholders

*/
function addValidElsToReadOnlyInputs($) {
  $('form input:read-only:not([type="submit"])').after('<span class="is-valid"></span>');
}

/*

Setting certain inputs as valid by default

*/
function setInputsToDefaultValid($) {
  $('.logged-in.edd-checkout #edd_purchase_form #edd-last').addClass('valid').attr('aria-invalid', false).after('<span class="is-valid"></span>');

  // $('.logged-in.edd-checkout #edd-email').off().unbind();
}

/*

Init Accordions

*/
function initAccordions($) {

  $('.accordion-heading').on('click', function () {

    $(this).next().slideToggle('fast');
    $(this).toggleClass('is-open');

    if ($(this).hasClass('is-open')) {
      $(this).find('[data-icon]').removeClass('fas fa-plus-square').addClass('fas fa-minus-square');
    } else {
      $(this).find('[data-icon]').removeClass('fas fa-minus-square').addClass('fas fa-plus-square');
    }
  });
}

/*

Set Correct Input Values
TODO: Set on server side if EDD allows us to

*/
function setCorrectInputValues($) {
  $('#edd_login_submit[value="Log In"]').val('Login');
}

/*

Step 1 - Reset Password Process

*/
function initForgotPasswordForm($) {

  $('#form-forgot-pass').submit(function (e) {
    e.preventDefault();
  }).validate({
    rules: {
      wps_account_forgot_password: {
        required: true,
        email: true
      }
    },
    messages: {
      wps_account_forgot_password: {
        required: "Email required",
        email: "Please enter a valid email"
      }
    },
    highlight: _validation.onInputAddError,
    unhighlight: function unhighlight(element) {

      (0, _validation.removeValidIcon)($(element));
      (0, _validation.hideInputError)($(element));
      (0, _validation.addValidInputClass)($(element));
      (0, _validation.insertValidIcon)($(element));
    },
    submitHandler: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(form) {
        var $form, formData, email;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                $form = $(form);


                (0, _utils.disableForm)($form);

                formData = (0, _utils.reduceFormData)($form);
                _context.next = 5;
                return (0, _ws.forgotPassword)(formData);

              case 5:
                email = _context.sent;


                (0, _utils.enableForm)($form);

                if (email) {
                  (0, _utils.insertMessage)('An email as been sent! Please click the link to finish the password reset process.', 'success');
                } else {
                  (0, _utils.insertMessage)('That email doesn\'t exist, please try again.', 'error');
                }

                (0, _utils.clearFormFields)($form);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function submitHandler(_x) {
        return _ref.apply(this, arguments);
      }

      return submitHandler;
    }()

  });
}

/*

Step 2 - Reset Password Process

*/
function initResetPasswordForm($) {

  $('#form-reset-pass').submit(function (e) {
    e.preventDefault();
  }).validate({
    rules: {
      wps_account_new_password: {
        required: true,
        minlength: 12
      },
      wps_account_new_password_confirm: {
        required: true,
        equalTo: "#wps_account_new_password",
        minlength: 12
      }
    },
    messages: {
      wps_account_new_password: {
        required: "New password required",
        minlength: "Passwords must be at least 12 characters long"
      },
      wps_account_new_password_confirm: {
        required: "Confirm new password",
        equalTo: "Passwords must match",
        minlength: "Passwords must be at least 12 characters long"
      }
    },
    highlight: _validation.onInputAddError,
    unhighlight: function unhighlight(element) {

      (0, _validation.removeValidIcon)($(element));
      (0, _validation.hideInputError)($(element));
      (0, _validation.addValidInputClass)($(element));
      (0, _validation.insertValidIcon)($(element));
    },
    submitHandler: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(form) {
        var $form, formData, passwordReset;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                $form = $(form);


                (0, _utils.disableForm)($form);

                formData = (0, _utils.reduceFormData)($form);
                _context2.next = 5;
                return (0, _ws.resetPassword)(formData);

              case 5:
                passwordReset = _context2.sent;


                if (passwordReset) {
                  // insertMessage('Success! Your password has been reset.', 'success');
                  window.location.href = '/account?password-reset=true';
                } else {

                  (0, _utils.enableForm)($form);

                  (0, _utils.insertMessage)('Sorry we couldn\'t reset your password. Please try again or email support for help.', 'error');
                }

                (0, _utils.clearFormFields)($form);

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function submitHandler(_x2) {
        return _ref2.apply(this, arguments);
      }

      return submitHandler;
    }()

  });
}

/*

initMessages
TODO: Pull into more general file as messages can span
more than just the account page

*/
function initMessages($) {

  if ($.urlParam('password-reset')) {
    (0, _utils.insertMessage)('Successfully updated password', 'success');
  }

  if ($.urlParam('email-change')) {
    (0, _utils.insertMessage)('Successfully updated email. Please log back in', 'success');
  }

  if ($.urlParam('email-name-change')) {
    (0, _utils.insertMessage)('Successfully updated email and name. Please log back in', 'success');
  }
}

function initPurchaseForm() {

  jQuery('.edd_price_options li:first-of-type').addClass('is-highlighted is-valid');

  jQuery('.edd_price_options li').on('click', function () {

    jQuery('.edd_price_option_35').prop('checked', false);
    jQuery('.edd_price_options li').removeClass('is-highlighted is-valid');

    jQuery(this).addClass('is-highlighted is-valid');
    jQuery(this).find('.edd_price_option_35').prop('checked', true);
  });
}

function initForms($) {
  animateLabel($);
  addPlaceholders($);
  // addValidElsToReadOnlyInputs($);
  setInputsToDefaultValid($);
  initAccordions($);
  initForgotPasswordForm($);
  initResetPasswordForm($);
  initMessages($);
  initPurchaseForm();
}

exports.initForms = initForms;
exports.initAccordions = initAccordions;